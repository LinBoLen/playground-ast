import ts from 'typescript';

export const TextToKeywordObj = {
  abstract: ts.SyntaxKind.AbstractKeyword,
  any: ts.SyntaxKind.AnyKeyword,
  as: ts.SyntaxKind.AsKeyword,
  asserts: ts.SyntaxKind.AssertsKeyword,
  bigint: ts.SyntaxKind.BigIntKeyword,
  boolean: ts.SyntaxKind.BooleanKeyword,
  break: ts.SyntaxKind.BreakKeyword,
  case: ts.SyntaxKind.CaseKeyword,
  catch: ts.SyntaxKind.CatchKeyword,
  class: ts.SyntaxKind.ClassKeyword,
  continue: ts.SyntaxKind.ContinueKeyword,
  const: ts.SyntaxKind.ConstKeyword,
  ['' + 'constructor']: ts.SyntaxKind.ConstructorKeyword,
  debugger: ts.SyntaxKind.DebuggerKeyword,
  declare: ts.SyntaxKind.DeclareKeyword,
  default: ts.SyntaxKind.DefaultKeyword,
  delete: ts.SyntaxKind.DeleteKeyword,
  do: ts.SyntaxKind.DoKeyword,
  else: ts.SyntaxKind.ElseKeyword,
  enum: ts.SyntaxKind.EnumKeyword,
  export: ts.SyntaxKind.ExportKeyword,
  extends: ts.SyntaxKind.ExtendsKeyword,
  false: ts.SyntaxKind.FalseKeyword,
  finally: ts.SyntaxKind.FinallyKeyword,
  for: ts.SyntaxKind.ForKeyword,
  from: ts.SyntaxKind.FromKeyword,
  function: ts.SyntaxKind.FunctionKeyword,
  get: ts.SyntaxKind.GetKeyword,
  if: ts.SyntaxKind.IfKeyword,
  implements: ts.SyntaxKind.ImplementsKeyword,
  import: ts.SyntaxKind.ImportKeyword,
  in: ts.SyntaxKind.InKeyword,
  infer: ts.SyntaxKind.InferKeyword,
  instanceof: ts.SyntaxKind.InstanceOfKeyword,
  interface: ts.SyntaxKind.InterfaceKeyword,
  is: ts.SyntaxKind.IsKeyword,
  keyof: ts.SyntaxKind.KeyOfKeyword,
  let: ts.SyntaxKind.LetKeyword,
  module: ts.SyntaxKind.ModuleKeyword,
  namespace: ts.SyntaxKind.NamespaceKeyword,
  never: ts.SyntaxKind.NeverKeyword,
  new: ts.SyntaxKind.NewKeyword,
  null: ts.SyntaxKind.NullKeyword,
  number: ts.SyntaxKind.NumberKeyword,
  object: ts.SyntaxKind.ObjectKeyword,
  package: ts.SyntaxKind.PackageKeyword,
  private: ts.SyntaxKind.PrivateKeyword,
  protected: ts.SyntaxKind.ProtectedKeyword,
  public: ts.SyntaxKind.PublicKeyword,
  readonly: ts.SyntaxKind.ReadonlyKeyword,
  require: ts.SyntaxKind.RequireKeyword,
  global: ts.SyntaxKind.GlobalKeyword,
  return: ts.SyntaxKind.ReturnKeyword,
  set: ts.SyntaxKind.SetKeyword,
  static: ts.SyntaxKind.StaticKeyword,
  string: ts.SyntaxKind.StringKeyword,
  super: ts.SyntaxKind.SuperKeyword,
  switch: ts.SyntaxKind.SwitchKeyword,
  symbol: ts.SyntaxKind.SymbolKeyword,
  this: ts.SyntaxKind.ThisKeyword,
  throw: ts.SyntaxKind.ThrowKeyword,
  true: ts.SyntaxKind.TrueKeyword,
  try: ts.SyntaxKind.TryKeyword,
  type: ts.SyntaxKind.TypeKeyword,
  typeof: ts.SyntaxKind.TypeOfKeyword,
  undefined: ts.SyntaxKind.UndefinedKeyword,
  unique: ts.SyntaxKind.UniqueKeyword,
  unknown: ts.SyntaxKind.UnknownKeyword,
  var: ts.SyntaxKind.VarKeyword,
  void: ts.SyntaxKind.VoidKeyword,
  while: ts.SyntaxKind.WhileKeyword,
  with: ts.SyntaxKind.WithKeyword,
  yield: ts.SyntaxKind.YieldKeyword,
  async: ts.SyntaxKind.AsyncKeyword,
  await: ts.SyntaxKind.AwaitKeyword,
  of: ts.SyntaxKind.OfKeyword
};

export const TextToToken = {
  ...TextToKeywordObj,
  "{": ts.SyntaxKind.OpenBraceToken,
  "}": ts.SyntaxKind.CloseBraceToken,
  "(": ts.SyntaxKind.OpenParenToken,
  ")": ts.SyntaxKind.CloseParenToken,
  "[": ts.SyntaxKind.OpenBracketToken,
  "]": ts.SyntaxKind.CloseBracketToken,
  ".": ts.SyntaxKind.DotToken,
  "...": ts.SyntaxKind.DotDotDotToken,
  ";": ts.SyntaxKind.SemicolonToken,
  ",": ts.SyntaxKind.CommaToken,
  "<": ts.SyntaxKind.LessThanToken,
  ">": ts.SyntaxKind.GreaterThanToken,
  "<=": ts.SyntaxKind.LessThanEqualsToken,
  ">=": ts.SyntaxKind.GreaterThanEqualsToken,
  "==": ts.SyntaxKind.EqualsEqualsToken,
  "!=": ts.SyntaxKind.ExclamationEqualsToken,
  "===": ts.SyntaxKind.EqualsEqualsEqualsToken,
  "!==": ts.SyntaxKind.ExclamationEqualsEqualsToken,
  "=>": ts.SyntaxKind.EqualsGreaterThanToken,
  "+": ts.SyntaxKind.PlusToken,
  "-": ts.SyntaxKind.MinusToken,
  "**": ts.SyntaxKind.AsteriskAsteriskToken,
  "*": ts.SyntaxKind.AsteriskToken,
  "/": ts.SyntaxKind.SlashToken,
  "%": ts.SyntaxKind.PercentToken,
  "++": ts.SyntaxKind.PlusPlusToken,
  "--": ts.SyntaxKind.MinusMinusToken,
  "<<": ts.SyntaxKind.LessThanLessThanToken,
  "</": ts.SyntaxKind.LessThanSlashToken,
  ">>": ts.SyntaxKind.GreaterThanGreaterThanToken,
  ">>>": ts.SyntaxKind.GreaterThanGreaterThanGreaterThanToken,
  "&": ts.SyntaxKind.AmpersandToken,
  "|": ts.SyntaxKind.BarToken,
  "^": ts.SyntaxKind.CaretToken,
  "!": ts.SyntaxKind.ExclamationToken,
  "~": ts.SyntaxKind.TildeToken,
  "&&": ts.SyntaxKind.AmpersandAmpersandToken,
  "||": ts.SyntaxKind.BarBarToken,
  "?": ts.SyntaxKind.QuestionToken,
  "??": ts.SyntaxKind.QuestionQuestionToken,
  "?.": ts.SyntaxKind.QuestionDotToken,
  ":": ts.SyntaxKind.ColonToken,
  "=": ts.SyntaxKind.EqualsToken,
  "+=": ts.SyntaxKind.PlusEqualsToken,
  "-=": ts.SyntaxKind.MinusEqualsToken,
  "*=": ts.SyntaxKind.AsteriskEqualsToken,
  "**=": ts.SyntaxKind.AsteriskAsteriskEqualsToken,
  "/=": ts.SyntaxKind.SlashEqualsToken,
  "%=": ts.SyntaxKind.PercentEqualsToken,
  "<<=": ts.SyntaxKind.LessThanLessThanEqualsToken,
  ">>=": ts.SyntaxKind.GreaterThanGreaterThanEqualsToken,
  ">>>=": ts.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken,
  "&=": ts.SyntaxKind.AmpersandEqualsToken,
  "|=": ts.SyntaxKind.BarEqualsToken,
  "^=": ts.SyntaxKind.CaretEqualsToken,
  "@": ts.SyntaxKind.AtToken,
  "`": ts.SyntaxKind.BacktickToken
}
